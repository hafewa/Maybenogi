@page "/register"
@using Microsoft.AspNetCore.Components
@using Maybenogi.Shared.Model
@inject IAccountService AccountService
@inject IAlertService AlertService
@inject NavigationManager NavigationManager

<h1>Add Account</h1>

<div class="card">
    <h4 class="card-header"></h4>
    <div class="card-body" width="50%">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Display Name</label>
                <InputText @bind-Value="model.DisplayName" class="form-control" />
                <ValidationMessage For="@(() => model.DisplayName)" />
            </div>
            <div class="form-group">
                <label>ID</label>
                <InputText @bind-Value="model.Email" class="form-control" />
                <ValidationMessage For="@(() => model.Email)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="model.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => model.Password)" />
            </div>
            <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Register
            </button>
            @*<NavLink href="account/login" class="btn btn-link">Cancel</NavLink>*@
        </EditForm>
    </div>
</div>

@code {

    private bool loading;
    private CreateNexonAccount model = new CreateNexonAccount();

    private async void OnValidSubmit()
    {
        AlertService.Clear();
        loading = true;

        try
        {
            await AccountService.Register(model);

            AlertService.Success("추가 성공", keepAfterRouteChange: true);
            // NavigationManager.NavigateTo("accounts");

            //await Task.Delay(2000);

            loading = false;
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}
